<?php
// $Id$

/**
 * Implementation of hook_schema().
 */
function pure_panels_template_schema() {
  // This should always point to our 'current' schema. This makes it relatively easy
  // to keep a record of schema as we make changes to it.
  $schema = array();
  $schema += pure_panels_template_schema_1();
  $schema += pure_panels_template_schema_2();

  return $schema;
}

/**
 * Schema version 1 for Panels in D6.
 */
function pure_panels_template_schema_1() {
  $schema = array();

  $schema['pure_panels_template'] = array(
    'export' => array(
      'identifier' => 'template',
      'export callback' => 'pure_panels_template_export',
      'api' => array(
        'owner' => 'pure_panels_template',
        'api' => 'panels_default',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'pid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
      ),
      'template_type' => array(
        'type' => 'varchar',
        'length' => '64',
      ),
      'category' => array(
        'type' => 'varchar',
        'length' => '64',
      ),
      'did' => array(
        'type' => 'int',
        'no export' => TRUE,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => '128',
      ),
      'requiredcontexts' => array(
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'object default' => array(),
      ),
      'contexts' => array(
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'object default' => array(),
      ),
      'relationships' => array(
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'object default' => array(),
      ),
    ),
    'primary key' => array('pid'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  return $schema;
}

/**
 * Schema for attaching panels to nodes
 */
function pure_panels_template_schema_2() {
  $schema = array();

  $schema['pure_panels_template_node'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
      ),
      'template_type' => array(
        'type' => 'varchar',
        'length' => '64',
      ),
    ),
    'primary key' => array('vid','template_type'),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function pure_panels_template_install() {
  drupal_install_schema('pure_panels_template');
}

/**
 * Implementation of hook_uninstall().
 */
function pure_panels_template_uninstall() {
  $result = db_query("SELECT * FROM {pure_panels_template} ORDER BY title");
  $panels_exists = db_table_exists('panels_display');
  while ($panel_template = db_fetch_object($result)) {
    // Delete all associated displays.
    if (!function_exists('panels_delete_display')) {
      require_once drupal_get_path('module', 'panels') .'/panels.module';
    }
    if ($panels_exists) {
      panels_delete_display($panel_template->did);
    }

    // Delete all configured blocks.
    db_query("DELETE FROM {blocks} WHERE module = 'pure_panels_template' AND delta = %d", $panel_template->pid);
  }

  // Finally, delete all template panels.
  drupal_uninstall_schema('pure_panels_template');
}
