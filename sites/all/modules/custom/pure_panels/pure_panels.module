<?php
// $Id: pure_panels.module,v 1.5.2.17 2009/10/21 20:51:49 merlinofchaos Exp $

/**
 * @file pure_panels.module
 *
 * This module provides template panels which are basically panels that can be
 * used within blocks or other panels.
 */

module_load_include('inc', 'pure_panels', 'contexts');
module_load_include('inc', 'pure_panels', 'node_form');

/**
 * hook_ctools_plugin_directory
 */
function pure_panels_ctools_plugin_directory($module, $plugin) {
  if ($module == 'page_manager' || $module == 'panels' || $module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}


/**
 * Implementation of hook_theme_registry_alter().
 */
function pure_panels_theme_registry_alter(&$reg) {
  $layouts = panels_get_layouts();
  // Add a preprocess function for each panels layout
  $path = path_to_theme();
  $panel_layouts = $path . '/panel_layouts';
  foreach ($layouts as $layout) {
    $reg[$layout['theme']]['preprocess functions'][] = 'pure_panels_preprocess_panels_layout';
    $reg[$layout['theme']]['theme paths'][] = $path;
    $reg[$layout['theme']]['theme paths'][] = $panel_layouts;
  }

  $reg['pure_panels_panel_layout']['theme paths'][] = $path; 
  $reg['pure_panels_panel_layout']['theme paths'][] = $panel_layouts; 
}

/*
  If the display theme was set, create the template suggestion
*/
function pure_panels_preprocess_panels_layout(&$vars) {
  $display = $vars['display'];
  $display_theme = $display->panel_settings['style_settings']['default']['display_theme'];
  if ($display_theme) {
    $vars['template_files'][] = $display_theme;
  }
  $panes_content = $vars['content']['panes_content'];
  foreach ((array) $panes_content as $key => $pane) {
    $vars[$key] = $pane->content;
  }
}

/**
 * Return all templates of a certain template type
 */
function pure_panels_get_templates($template_type) {
  $all_panels = pure_panels_template_load_all();
  $list = array();

  foreach ($all_panels as $name => $panel) {
    if ($template_type == $panel->template_type) {
      $list[$name] = check_plain($name) . ' (' . check_plain($panel->title) . ')';
    }
  }
  return $list;
}

/**
 * Get all defined template types
 */
function pure_panels_get_template_types() {
  $types = array();

  foreach (module_implements('pure_panels_template_types') as $module) {
    $func = $module . '_pure_panels_template_types';
    $ret = $func();
    if (is_array($ret)) {
      $types = array_merge_recursive($types, $ret);
    }
  }

  drupal_alter('pure_panels_template_types', $types);

  return $types;
}

/*
  Implementation of panel_task_override
  Provided by panel_template.inc panel task
*/
function pure_panels_panel_task_override(&$handler,$display) {
  if ($handler->task == 'node_view') {
    return pure_panels_node_view_task_override($handler, $display);
  }
  if ($handler->task == 'site_template') {
    return pure_panels_site_template_task_override($handler, $display);
  }
}

function pure_panels_task_cascade($type, &$node=NULL) {
  // Node is final say
  $template_types = pure_panels_get_template_types();
  if($node) {
    foreach ((array) $node->pure_panels as $key=>$template) {
      if ($template_types[$key] && $template_types[$key]['parent'] == $type) {
        return $override = $node->pure_panels[$key];
      }
    }
  }

  if (!function_exists('context_get_plugin')) { 
    return;
  }

  // check context
  foreach($template_types as $type => $template) {
    if($template['parent'] != $type) {
      continue;;
    }

    $plugin = context_get_plugin('reaction','pure_panels');
    $override = $plugin->get_template($type);
    if($override) {
      return $override;
    }
  }
}

function pure_panels_node_view_task_override(&$handler,$display) {

  $node = $display->context['argument_nid_1']->data;

  $name = pure_panels_task_cascade('node_view', $node);  

  $templates = pure_panels_template_load_all();
  $template = $templates[$name];

  if ($template) {
    $display = $template->display;
    $context = pure_panels_get_contexts($template);
    $display->context = $context;
    return $display;
  }
}

function pure_panels_site_template_task_override(&$handler,$display) {

  $node = $display->context['context_pure_panels_node_1']->data;
  $args = $display->args;

  $name = pure_panels_task_cascade('site_template', $node);  

  $templates = pure_panels_template_load_all();
  $template = $templates[$name];

  if ($template) {
    $display = $template->display;

    $task = page_manager_get_task('site_template');
    // Remember $args comes from old $display that panels_everywher prepared
    $url = $args[0];
    $content = $args[1];
    $page = $args[2];

    $contexts = ctools_context_handler_get_task_contexts($task, '', array($url, $content, $page));
    $display->context = $contexts;
    return $display;
  }
}


function pure_panels_grab_display($name) {
  $templates = pure_panels_template_load_all();
  $template = $templates[$name];

  if ($template) {
    // By this point the display should ahve been loaded
    $display = $template->display ? $template->display : panels_load_display($template->did);
    $context = pure_panels_get_contexts($template);
    $display->context = $context;
    return $display;
  }
}


function pure_panels_get_contexts(&$template) {
  // include context
  ctools_include('context');  
  return ctools_context_load_contexts($template);
}
