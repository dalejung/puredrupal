<?php
// $Id: pure_panels.module,v 1.5.2.17 2009/10/21 20:51:49 merlinofchaos Exp $

/**
 * @file pure_panels.module
 *
 * This module provides template panels which are basically panels that can be
 * used within blocks or other panels.
 */

module_load_include('inc', 'pure_panels', 'contexts');
module_load_include('inc', 'pure_panels', 'node_form');

/**
 * Implementation of hook_perm().
 */
function pure_panels_perm() {
  return array('create template panels', 'adtemplatester template panels');
}

/**
 * Implementation of hook_menu().
 */
function pure_panels_menu() {
  // Safety: go away if CTools is not at an appropriate version.
  if (!defined('PANELS_REQUIRED_CTOOLS_API') || !module_invoke('ctools', 'api_version', PANELS_REQUIRED_CTOOLS_API)) {
    return array();
  }
  require_once drupal_get_path('module', 'pure_panels') . '/pure_panels.admin.inc';
  return _pure_panels_menu();
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function pure_panels_theme_registry_alter(&$reg) {
  $layouts = panels_get_layouts();
  // Add a preprocess function for each panels layout
  $path = path_to_theme();
  $panel_layouts = $path . '/panel_layouts';
  foreach ($layouts as $layout) {
    $reg[$layout['theme']]['preprocess functions'][] = 'pure_panels_preprocess_panels_layout';
    $reg[$layout['theme']]['theme paths'][] = $path;
    $reg[$layout['theme']]['theme paths'][] = $panel_layouts;
  }

  $reg['pure_panels_panel_layout']['theme paths'][] = $path; 
  $reg['pure_panels_panel_layout']['theme paths'][] = $panel_layouts; 
}

/*
  If the display theme was set, create the template suggestion
*/
function pure_panels_preprocess_panels_layout(&$vars) {
  $display = $vars['display'];
  $display_theme = $display->panel_settings['style_settings']['default']['display_theme'];
  if ($display_theme) {
    $vars['template_files'][] = $display_theme;
  }
  $panes_content = $vars['content']['panes_content'];
  foreach ((array) $panes_content as $key => $pane) {
    $vars[$key] = $pane->content;
  }
}

/**
 * Statically store all used IDs to ensure all template panels get a unique id.
 */
function pure_panels_get_id($name) {
  static $id_cache = array();

  $id = 'template-panel-' . $name;
  if (!empty($id_cache[$name])) {
    $id .= "-" . $id_cache[$name]++;
  }
  else {
    $id_cache[$name] = 1;
  }

  return $id;
}

// ---------------------------------------------------------------------------
// Database functions.

/**
 * Create a new page with defaults appropriately set from schema.
 */
function pure_panels_new() {
  ctools_include('export');
  return ctools_export_new_object('pure_panels');
}

/**
 * Load a single template panel.
 */
function pure_panels_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('pure_panels', 'names', array($name));
  if (isset($result[$name])) {
    if (empty($result[$name]->display)) {
      $result[$name]->display = panels_load_display($result[$name]->did);
    }
    /**
     * TODO: This is ugly as hell. Not sure if this is the best place to put this
     *
     */
    // Always default first context to the Node being viewed
    $result[$name]->contexts[0] = array(
      'name' => 'pure_panels_node',
      'id' => 1,
      'identifier' => t('Node being viewed'),
      'keyword' => 'node',
    );
    // Panel Everywhere Support
    $args = array(
        array(
          'keyword' => 'url',
          'identifier' => t('URL'),
          'id' => 1,
          'name' => 'string',
          'settings' => array(),
        ),
        array(
          'keyword' => 'content',
          'identifier' => t('Page content'),
          'id' => 1,
          'name' => 'page_content',
          'settings' => array(),
        ),
        array(
          'keyword' => 'page',
          'identifier' => t('Managed page'),
          'id' => 1,
          'name' => 'managed_page',
          'settings' => array(),
        ),
      );
    $result[$name]->arguments = $args;

    return $result[$name];
  }
}

/**
 * Load all template panels.
 */
function pure_panels_load_all($reset=FALSE) {
  static $templates;
  // If this page was loaded before and data was found, just return it.
  if ($templates) {
    return $templates;
  }
  // If there's a cached version of the template_panels available, use it.
  if (!$reset && $cache = cache_get('pure_panels_load_all')) {
    $templates = $cache->data;
    return $templates;
  }

  ctools_include('export');
  $templates = ctools_export_load_object('pure_panels');
  $dids = array();
  foreach ($templates as $template) {
    if (!empty($template->did)) {
      $dids[$template->did] = $template->name;
    }
  }

  $displays = panels_load_displays(array_keys($dids));
  foreach ($displays as $did => $display) {
    $templates[$dids[$did]]->display = $display;
  }

  // Cache the template panels for later.
  cache_set('pure_panels_load_all', $templates);

  return $templates;
}

/**
 * Write a template panel to the database.
 */
function pure_panels_save(&$template) {
  if (!empty($template->display)) {
    $display = panels_save_display($template->display);
    $template->did = $display->did;
  }

  $update = (isset($template->pid) && $template->pid != 'new') ? array('pid') : array();
  drupal_write_record('pure_panels', $template, $update);
  cache_clear_all('pure_panels_load_all', 'cache');

  return $template;
}

/**
 * Remove a template panel.
 */
function pure_panels_delete($template) {
  db_query("DELETE FROM {pure_panels} WHERE name = '%s'", $template->name);
  return panels_delete_display($template->did);
}

/**
 * Export a template panel.
 */
function pure_panels_export($template, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('pure_panels', $template, $indent);
  // Export the primary display
  $display = !empty($template->display) ? $template->display : panels_load_display($template->did);
  $output .= panels_export_display($display, $indent);
  $output .= $indent . '$template->display = $display' . ";\n";
  return $output;
}

/**
 * Menu callback to check to see if a template panel is valid as part
 * of a path, and if it is, return the template.
 */
function pure_panels_admin_load($name) {
  $template = pure_panels_load($name);
  if ($template && empty($template->disabled)) {
    return $template;
  }
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * we implement task and task_handler plugins.
 */
function pure_panels_ctools_plugin_directory($module, $plugin) {
  if ($module == 'page_manager' || $module == 'panels' || $module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

function pure_panels_pure_panels_list($template_type = NULL) {
  $all_panels = pure_panels_load_all();
  $list = array();

  foreach ($all_panels as $name => $panel) {
    $list[$name] = check_plain($name) . ' (' . check_plain($panel->title) . ')';
  }
  return $list;
}

function pure_panels_pure_panels_list_type($template_type) {
  $all_panels = pure_panels_load_all();
  $list = array();

  foreach ($all_panels as $name => $panel) {
    if ($template_type == $panel->template_type) {
      $list[$name] = check_plain($name) . ' (' . check_plain($panel->title) . ')';
    }
  }
  return $list;
}

function pure_panels_get_template_types() {
  $types = array();

  foreach (module_implements('pure_panels_template_types') as $module) {
    $func = $module . '_pure_panels_template_types';
    $ret = $func();
    if (is_array($ret)) {
      $types = array_merge_recursive($types, $ret);
    }
  }

  drupal_alter('pure_panels_template_types', $types);

  return $types;
}

/*
  Implementation of panel_task_override
  Provided by panel_template.inc panel task
*/
function pure_panels_panel_task_override(&$handler,$display) {
  if ($handler->task == 'node_view') {
    return pure_panels_node_view_task_override($handler, $display);
  }
  if ($handler->task == 'site_template') {
    return pure_panels_site_template_task_override($handler, $display);
  }
}

function pure_panels_task_cascade($type, &$node=NULL) {
  // Node is final say
  $template_types = pure_panels_get_template_types();
  if($node) {
    foreach ((array) $node->pure_panels as $key=>$template) {
      if ($template_types[$key] && $template_types[$key]['parent'] == $type) {
        return $override = $node->pure_panels[$key];
      }
    }
  }

  if (!function_exists('context_get_plugin')) { 
    return;
  }

  // check context
  foreach($template_types as $type => $template) {
    if($template['parent'] != $type) {
      continue;;
    }

    $plugin = context_get_plugin('reaction','pure_panels');
    $override = $plugin->get_template($type);
    if($override) {
      return $override;
    }
  }
}

function pure_panels_node_view_task_override(&$handler,$display) {

  $node = $display->context['argument_nid_1']->data;

  $name = pure_panels_task_cascade('node_view', $node);  

  $templates = pure_panels_load_all();
  $template = $templates[$name];

  if ($template) {
    $display = $template->display;
    $context = pure_panels_get_contexts($template);
    $display->context = $context;
    return $display;
  }
}

function pure_panels_site_template_task_override(&$handler,$display) {

  $node = $display->context['context_pure_panels_node_1']->data;
  $args = $display->args;
  $content = $args[1]->content;

  $name = pure_panels_task_cascade('site_template', $node);  

  $templates = pure_panels_load_all();
  $template = $templates[$name];

  if ($template) {
    $display = $template->display;
    $task = page_manager_get_task('site_template');
    $page = page_manager_get_current_page();
    $contexts = ctools_context_handler_get_task_contexts($task, '', array($_GET['q'], $content, $page));
    $display->context = $contexts;
    return $display;
  }
}


function pure_panels_grab_display($name) {
  $templates = pure_panels_load_all();
  $template = $templates[$name];

  if ($template) {
    // By this point the display should ahve been loaded
    $display = $template->display ? $template->display : panels_load_display($template->did);
    $context = pure_panels_get_contexts($template);
    $display->context = $context;
    return $display;
  }
}


function pure_panels_get_contexts(&$template) {
  // include context
  ctools_include('context');  
  return ctools_context_load_contexts($template);
}
